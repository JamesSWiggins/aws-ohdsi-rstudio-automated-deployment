# Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with the License. 
# A copy of the License is located at
#    http://aws.amazon.com/apache2.0/
# or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
# either express or implied. See the License for the specific language governing permissions and limitations under the License.


AWSTemplateFormatVersion: '2010-09-09'
Description: This CloudFormation Template deploys a complete OHDSI environment.  It
  depends on the OHDSI-VPC CloudFormation Template.



Parameters:
#  VpcId:
#    Type: AWS::EC2::VPC::Id
#    Description: VPC this server will reside in
  VPCSubnet:
    Description: The subnet in which you want your R-Studio server to be deployed.
    Type: AWS::EC2::Subnet::Id
  RStudioSecurityGroup:
    Description: The Security Group you want to use to contorl access to your R-Studio Server.
    Type: AWS::EC2::SecurityGroup::Id
  S3UserList:
    AllowedValues: 
      - true
      - false
    Default: false
    Description: Set this to true if you want to provide a text file with usernames and passwords for R-Studio
    Type: String 
  S3UserPath:
    Description: If you set the UserList parameter to 'True', then place the S3 path to the text file containing the usernames and passwords in this parameter.  Otherwise, leave it set to 'none'
    Default: none
    Type: String
  InstanceType:
    Type: String
    Description: Instance type for the R-Studio server.
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.10xlarge
      - m5.16xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.8xlarge
      - r4.large
      - r4.xlarge
      - r4.2xlarge
      - r4.4xlarge
      - r4.8xlarge
      - r4.16xlarge
      - g2.2xlarge
      - g2.8xlarge
      - p2.xlarge
      - p2.8xlarge
      - p2.16xlarge
      - g3.4xlarge
      - g3.8xlarge
      - g3.16xlarge
    ConstraintDescription: Valid instance type in the t2, m5, c5, r4, g2, p2, and g3 families
    Default: t2.xlarge
  RStudioPassword:
    Description: If you are not providing a User List in S3, then a default username 'rstudio' will be created.  You can set the password for this user with this parameter.  If you provide an S3 User List then this field is ignored.
    Default: yourOHDSIpassword1
    Type: String
    NoEcho: true
    AllowedPattern: ^(?=.{8,32}$)(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9]).*
    ConstraintDescription: "Must be between 8-32 characters and contain one or must upper case letters, lower case letters, and numbers."
  KeyPair:
    Description: The EC2 Key Pair to use for the Atlas/WebAPI EC2 Instances.
    Type: AWS::EC2::KeyPair::KeyName

Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-1853ac65
    us-east-2:
      AMI: ami-15e9c770
    us-west-1:
      AMI: ami-a51f27c5
    us-west-2:
      AMI: ami-bf4193c7
    ca-central-1:
      AMI: ami-d29e25b6
    eu-west-1:
      AMI: ami-1a962263
    eu-west-2:
      AMI: ami-e7d6c983
    eu-west-3:
      AMI: ami-dd8b3ca0
    eu-central-1:
      AMI: ami-bf2ba8d0
    sa-east-1:
      AMI: ami-286f2a44
    ap-south-1:
      AMI: ami-d5c18eba
    ap-southeast-1:
      AMI: ami-c63d6aa5
    ap-southeast-2:
      AMI: ami-ff4ea59d
    ap-northeast-1:
      AMI: ami-da9e2cbc
    ap-northeast-2:
      AMI: ami-1196317f


Resources:
# This is a temporary EC2 server used to do the following: 
#  * Create the appropriate database and users for WebAPI inside Aurora Postgres.
#  * Download the WebAPI and Atlas source from GitHub.
#  * Provide the appropriate URLs for the WebAPI database and Atlas, compile WebAPI, and combine it with Atlas.
#  * Upload this application bundle to S3 to be used by Elastic Beanstalk.
#  * Load the build the OMOP CDM and Results schema on Redshift
#  * Load the CMS DE-SynPUF 1K sample data and the Athena provided vocabularies into Redshift.
#  * Once WebAPI flyback has deployed the approrpriate schema, load Redshift CDM, Vocabulary, and Results data sources into the WebAPI database.
#  * Restart WebAPI to recognize the new data sources.
#  * Download the Achilles R scripts from GitHub and use them to populate the Results data.

  RStudioInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      KeyName: !Ref 'KeyPair'
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      IamInstanceProfile: !Ref RStudioInstanceProfile
      SecurityGroupIds: 
        - !Ref RStudioSecurityGroup
      SubnetId: !Ref VPCSubnet 
      UserData:
        Fn::Base64: !Sub
          - | 
            #!/bin/bash
            RSTUDIO_URL="https://download2.rstudio.org/rstudio-server-rhel-1.0.153-x86_64.rpm"
            SHINY_URL="https://download3.rstudio.org/centos5.9/x86_64/shiny-server-1.5.1.834-rh5-x86_64.rpm"
            RSTUDIOPORT=8787
            MIN_USER_ID=400 # default is 500 starting from 1.0.44, EMR hadoop user id is 498
            USEUSERFILE=${UseUserFileVar}
            USERPW=${UserPW}

            date > /tmp/rstudio_sparklyr_emr5.tmp
            export MAKE='make -j 8'
            sudo yum install -y xorg-x11-xauth.x86_64 xorg-x11-server-utils.x86_64 xterm libXt libX11-devel libXt-devel libcurl-devel git compat-gmp4 compat-libffi5 openssl-devel
            sudo yum install R R-core R-core-devel R-devel libxml2-devel -y
            if [ -f /usr/lib64/R/etc/Makeconf.rpmnew ]; then
              sudo cp /usr/lib64/R/etc/Makeconf.rpmnew /usr/lib64/R/etc/Makeconf
            fi
            if [ -f /usr/lib64/R/etc/ldpaths.rpmnew ]; then
              sudo cp /usr/lib64/R/etc/ldpaths.rpmnew /usr/lib64/R/etc/ldpaths
            fi

            mkdir /mnt/r-stuff
            cd /mnt/r-stuff

            pushd .
            mkdir R-latest
            cd R-latest
            wget https://cran.r-project.org/src/base/R-3/R-3.5.0.tar.gz
            tar -xzf R-3.5.0.tar.gz
            sudo yum install -y gcc gcc-c++ gcc-gfortran
            sudo yum install -y readline-devel cairo-devel libpng-devel libjpeg-devel libtiff-devel
            cd R-3*
            ./configure --with-readline=yes --enable-R-profiling=no --enable-memory-profiling=no --enable-R-shlib --with-pic --prefix=/usr --with-x --with-libpng --with-jpeglib --with-cairo --enable-R-shlib --with-recommended-packages=yes
            make -j 8
            sudo make install
            sudo su << BASH_SCRIPT
            echo 'export PATH=${!PWD}/bin:$PATH' >> /etc/profile
            BASH_SCRIPT
            popd

            sudo sed -i 's/make/make -j 8/g' /usr/lib64/R/etc/Renviron

            # set unix environment variables
            sudo su << BASH_SCRIPT
            echo '
            export HADOOP_HOME=/usr/lib/hadoop
            export HADOOP_CMD=/usr/bin/hadoop
            export HADOOP_STREAMING=/usr/lib/hadoop-mapreduce/hadoop-streaming.jar
            export JAVA_HOME=/etc/alternatives/jre
            ' >> /etc/profile
            BASH_SCRIPT
            sudo sh -c "source /etc/profile"

            # fix hadoop tmp permission
            sudo chmod 777 -R /mnt/var/lib/hadoop/tmp

            # fix java binding - R and packages have to be compiled with the same java version as hadoop
            sudo R CMD javareconf


            # install rstudio
            # only run if master node


            RSTUDIO_FILE=$(basename $RSTUDIO_URL)
            wget $RSTUDIO_URL
            sudo yum install --nogpgcheck -y $RSTUDIO_FILE
            # change port - 8787 will not work for many companies
            sudo sh -c "echo 'www-port=$RSTUDIOPORT' >> /etc/rstudio/rserver.conf"
            sudo sh -c "echo 'auth-minimum-user-id=$MIN_USER_ID' >> /etc/rstudio/rserver.conf"
            sudo perl -p -i -e "s/= 5../= 100/g" /etc/pam.d/rstudio
            sudo rstudio-server stop || true
            sudo rstudio-server start

            sudo R --no-save << R_SCRIPT
            install.packages(c('RJSONIO', 'devtools', 'itertools', 'digest', 'Rcpp', 'functional', 'httr', 'plyr', 'stringr', 'reshape2', 'caTools', 'rJava', 'devtools', 'DBI', 'ggplot2', 'dplyr', 'R.methodsS3', 'Hmisc', 'memoise', 'rjson'),
            repos="http://cran.rstudio.com")
            R_SCRIPT

            
            sudo R --no-save << R_SCRIPT
            library(devtools)
            devtools::install_github("ohdsi/SqlRender", ref = "v1.4.10")
            devtools::install_github("ohdsi/DatabaseConnector", ref = "v2.1.0")
            devtools::install_github("ohdsi/OhdsiRTools", ref = "v1.5.3")
            devtools::install_github("ohdsi/FeatureExtraction", ref = "v2.0.2")
            devtools::install_github("ohdsi/Cyclops", ref = "v1.3.1")
            devtools::install_github("ohdsi/BigKnn")
            devtools::install_github("ohdsi/CohortMethod", ref = "v2.5.0")
            devtools::install_github("ohdsi/EmpiricalCalibration", ref = "v1.3.6")
            devtools::install_github("ohdsi/PatientLevelPrediction", ref = "v2.0.2")
            R_SCRIPT

            SHINY_FILE=$(basename $SHINY_URL)
                wget $SHINY_URL
                sudo yum install --nogpgcheck -y $SHINY_FILE

                sudo R --no-save <<R_SCRIPT
            install.packages(c('shiny','rmarkdown'),
            repos="http://cran.rstudio.com")
            R_SCRIPT

            sudo rm -f /tmp/rstudio_sparklyr_emr5.tmp

            sudo yum install -y cairo-devel
            wget https://repo.continuum.io/archive/Anaconda2-5.1.0-Linux-x86_64.sh
            chmod +x Anaconda2-5.1.0-Linux-x86_64.sh
            sudo ./Anaconda2-5.1.0-Linux-x86_64.sh -b -p /usr/anaconda2/
            sudo yum install -y python-scipy
            sudo pip install scipy
            sudo pip install sklearn

            if [ "$USERFILEVAR" = true ]; then
              s3 cp ${S3UserListPath} .

              while read users; do
                USER=`echo $users | cut -d ' ' -f 1`
                USERPW=`echo $users | cut -d ' ' -f 2`
                sudo adduser $USER 
                sudo sh -c "echo '$USERPW' | passwd --stdin $USER"
              done <users.txt
            else
              sudo adduser rstudio
              sudo sh -c "echo '$USERPW' | passwd --stdin rstudio"
            fi
          - { UseUserFileVar: !Ref S3UserList, S3UserListPath: !Ref S3UserPath, UserPW: !Ref RStudioPassword }

  RStudioS3ReadPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: RStatsS3ReadPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
            - "s3:ListBucket"
            Resource: 
            - arn:aws:s3:::*
          - Effect: Allow
            Action:
            - "s3:GetObject"
            - "s3:DeleteObject"
            Resource: 
            - arn:aws:s3:::*
      Roles:
      - !Ref RStudioS3ReadRole

  RStudioS3ReadRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"

  RStudioInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref 'RStudioS3ReadRole'
  
Outputs:
  RStudioInstanceId:
    Value: !Ref 'RStudioInstance'